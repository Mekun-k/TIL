4月21日(日)の積み上げ

ファイナル問題-解けなかった。
# 自然数 N, M と N 個の自然数からなる数列 A と M 個の自然数からなる数列 B が与えられます。
# 1 行目には数列 A の最初の B_1 個の値を出力し、 2 行目にはその次から B_2 個の値を出力します。
# このように、i 行目には数列 A の 1 + B_1 + B_2 + ... + B_{i - 1} 番目の値から B_i 個の値を出力してください。
# 言い換えると、数列 A の値を B_1 個、B_2個、... B_M 個で分割し、それぞれの数列を改行区切りで出力してください。

# 入力例1
# 10 4
# 1 2 3 4 5 6 7 8 9 10
# 2 6 1 1

# 出力例1
# 1 2
# 3 4 5 6 7 8
# 9
# 10

#me
N, M = gets.split(' ').map(&:to_i)
A = gets.split(' ').map(&:to_i)
B = gets.split(' ').map(&:to_i)

p "N#{N}"
p "M#{M}"
p "A#{A}"
p "B#{B}"

start_index = 0

M.times do |i|
    b = B[i]
    end_index = start_index + b
    puts  [start_index...end_index].to_a.join(' ')
    start_index = end_index
end

下が正解
puts  A[start_index...end_index].to_a.join(' ')
A配列のインデックス番号を指定していた。その発想がなかったので学びになった。
明日、もう一度解いてみて解けるか検証してみる。

解けなかった問題。
https://paiza.jp/works/mondai/stdout_primer/stdout_primer__format_real_number_step3/edit?language_uid=ruby
N = gets.to_f.round(3)
puts format('%.3f', N)

format('%.3f', N)は、浮動小数点数 N を小数第3位までの桁でフォーマットするための方法です。ここでの '%.3f' は、フォーマット文字列で、次のように解釈されます：

% : フォーマット指定子の開始を示します。
.3 : 小数点以下の桁数を指定します。この場合、小数第3位までを表します。
f : 浮動小数点数をフォーマットする指定子です。
format メソッドは、指定されたフォーマット文字列に従って引数をフォーマットし、文字列として返します。つまり、format('%.3f', N)は、N を小数第3位までの桁でフォーマットし、その結果を文字列として返します。

これにより、小数第3位まで丸められた値が文字列として得られます。そして、puts メソッドによってその文字列が出力されます。

正解
https://paiza.jp/works/mondai/stdout_primer/ruby/stdout_primer__format_real_number_step4/result?token=299c6b5ec9f5165b81bdf1d123120a70
# 実数 N、自然数 M が入力されます。N を丸めて小数第 M 位まで出力してください。
# また、N の小数部が小数第 M 位に満たない場合は 0 で埋めて出力してください。

# なお、小数第 M 位が 5 になることはありません。
# 自然な丸め処理を行って出力すると正解になります。

# 入力例4
# 0.813 4

# 出力例4
# 0.8130

#me
N, M = gets.chomp.split(' ').map(&:to_f)

reslut = N.round(M.to_i)
puts format("%.#{M.to_i}f", N)

もっと短くできるみたい。
Mを浮動小数点数から整数に変換する必要はないみたい。
このコードであれば浮動小数点数でも正常に作動するらしい。


ファイナル問題-解けた！
https://paiza.jp/works/mondai/stdout_primer/ruby/stdout_primer__format_real_number_boss/result?token=36c0a194d931ffb41bbb65bdd2e0f62c
# 自然数 Q が与えられます。Q 回以下の問題に答えてください。

# * 実数 N、自然数 M が入力されます。N を丸めて小数第 M 位まで出力してください。
# また、N の小数部が小数第 M 位に満たない場合は 0 で埋めて出力してください。

# なお、小数第 M 位が 5 になることはありません。
# 自然な丸め処理を行って出力すると正解になります。

# Q
# N_1 M_1

# 入力例1
# 4
# 0.813 1
# 0.813 2
# 0.813 3
# 0.813 4

# 出力例1
# 0.8
# 0.81
# 0.813
# 0.8130

Q = gets.to_i

Q.times do |i|
    N, M = gets.split(' ').map(&:to_f)
    sum = N.round(M.to_i)
    puts format("%.#{M.to_i}f", sum)
end

文字を連結したいときはメソッドを使わなくてもできる
以下の内容は先頭に空白を追加したい時に使用する
N = ' ' + N

https://paiza.jp/works/mondai/stdout_primer/ruby/stdout_primer__print_width_step3/result?token=b3e7b95055427d6fe022e87db777930f

# 自然数 N が与えられます。
# N 個の自然数が与えられるので、それぞれを数値 M_i について以下の処理を行ってください。
# M_i が 3 けたになるよう数値の前に半角スペースを埋めて出力してください。

# 入力される値
# N
# M_1
# M_2
# M_3
# ...
# M_N


# 期待する出力
# M_1
# M_2
# M_3
# ...
# M_N

N = gets.to_i

N.times do |i|
    M = gets.chomp
    output = M.rjust(3, " ")
    puts output
end

https://paiza.jp/works/mondai/stdout_primer/stdout_primer__print_width_step4/edit?language_uid=ruby&t=84e664ef050db88a9954e8d0a83d2418
# 自然数 N, M が与えられます。
# N が M けたになるよう数値の前に半角スペースを埋めて出力してください。

# 入力例1
# 813 4

# 出力例1
# 813

# 入力例2
# 813 8

# 出力例2
# 813

N, M = gets.split(' ')

output = N.rjust(M.to_i, " ")
puts output

ファイナル問題-解けた！
https://paiza.jp/works/mondai/stdout_primer/stdout_primer__print_width_boss/edit?language_uid=ruby&t=4ac5340c97f88af67d4027fcd6b71e5b

# 自然数 N, M と N 個の自然数 A_1, A_2, ..., A_N が与えられます。
# それぞれの数値が M けたになるよう数値の前に半角スペースを埋めて、改行区切りで出力してください。

# 入力例1
# 4 3
# 0
# 8
# 81
# 813

# 出力例1
# 0
# 8
# 81
# 813

N, M = gets.split(' ').map(&:to_i)

N.times do
    A = gets.chomp
    output = A.rjust(M, " ")
    puts output
end

https://paiza.jp/works/mondai/stdout_primer/ruby/stdout_primer__specific_format_step1/result?token=8a94b3ece7b53b1da5e2783c8b2f8536
 # 文字列 S, T が与えられます。S + T = ST という形式で文字列を出力してください。

# 入力例1
# kirishima
# kyoko

# 出力例1
# kirishima + kyoko = kirishimakyoko

# 入力例2
# S
# T

# 出力例2
# S + T = ST

S = gets.chomp
T = gets.chomp

puts "#{S} + #{T} = #{S + T}"


jiji
https://paiza.jp/works/mondai/stdout_primer/ruby/stdout_primer__specific_format_step2/result?token=b2d7da7cec9b10604b981c63a9cdf582

# 自然数 N, A, B が与えられます。(A, B) という形式の文字列を N 回、カンマと半角スペース区切りで出力してください。

# 入力例1
# 3 10 99

# 出力例1
# (10, 99), (10, 99), (10, 99)

# 入力例2
# 2 33 44

# 出力例2
# (33, 44), (33, 44)

N, A, B = gets.split(' ')

a = []

N.to_i.times do
    a << "(#{A}, #{B})"
end

puts a.join(', ')




jijijij
https://paiza.jp/works/mondai/stdout_primer/stdout_primer__specific_format_step3/edit?language_uid=ruby

# 九九表を、横の数値間では | (半角スペース 2 つとバーティカルライン)、縦の数値間では = で区切って出力してください。
# ただし、数値を出力する際は 2 けたになるよう半角スペース埋めで出力します。
# また、縦の数値間で = を出力する際は、その上の行と文字数が等しくなるように出力します。

# 期待する出力
# 答えの文字列を出力してください。

#  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9
# ==========================================
#  2 |  4 |  6 |  8 | 10 | 12 | 14 | 16 | 18
# ==========================================
#  3 |  6 |  9 | 12 | 15 | 18 | 21 | 24 | 27




9.times do |i|
    i += 1
    result = (1..9).map { |j| j * i }
    puts result.join(' | ')
    text_length = result.join(' | ').length
    val = "="
    output = val.rjust(text_length, "=")
    puts output
end

#出力結果
1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
=================================
2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18
======================================
3 | 6 | 9 | 12 | 15 | 18 | 21 | 24 | 27
=======================================
4 | 8 | 12 | 16 | 20 | 24 | 28 | 32 | 36
========================================
5 | 10 | 15 | 20 | 25 | 30 | 35 | 40 | 45
=========================================
6 | 12 | 18 | 24 | 30 | 36 | 42 | 48 | 54
=========================================
7 | 14 | 21 | 28 | 35 | 42 | 49 | 56 | 63
=========================================
8 | 16 | 24 | 32 | 40 | 48 | 56 | 64 | 72
=========================================
9 | 18 | 27 | 36 | 45 | 54 | 63 | 72 | 81
=========================================





