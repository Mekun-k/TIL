4月22日(月)の積み上げ

「累乗 2 Ruby編」
https://paiza.jp/works/mondai/arithmetic_substitution_op/arithmetic_substitution_op__arithmetic_step6

# 整数 A, B, C, D が与えられます。  を計算した結果を出力してください。
# ここで、X mod Dとは X を D で割った余りを指します。

# ((A + B) * C)二乗  X / D

# 入力例1
# 28 57 33 73

# 出力例1
# 12

A, B, C, D = gets.split(' ').map(&:to_i)
result = ((A + B) ** 2 * C ** 2) % D
puts result

代入演算 4 Ruby編」
https://paiza.jp/works/mondai/arithmetic_substitution_op/arithmetic_substitution_op__substitution_step4
# 整数 A, B が与えられます。以下のアルゴリズムを実行してください。
# 変数 N を 10,000 で初期化する
# N を A で割った商を N へ代入する
# N を B で割った余りを N へ代入する
# N を出力する

# 入力例1
# 911 285

# 出力例1
# 10

N = 10000

A, B = gets.split(' ').map(&:to_i)

N = N / A
N = N % B

puts N


C144:じゃんけんの結果
https://paiza.jp/works/challenges/710/page/result

# アリスさんはじゃんけんが大好きで、過去に何度も友達のボブさんとじゃんけんを行いました。
# 手元には、アリスさんとボブさんとの間で、過去に行われたじゃんけんの結果を全て記録したノートがあります。

# ノートの記録を元に、過去にアリスさんはボブさんに何回勝ったかを出力するプログラムを作成してください。

# 例えば入力例 1 の場合、過去にじゃんけんは 6 回行われ、
# そのうちアリスさんは 3 回勝ち、 1 回あいこ、 2 回負けているので、プログラムでは 3 と一行に出力します。

# ・1 行で過去に行われたじゃんけんの回数を表す整数 N が与えられます。
# ・続く N 行のうちの i 行目 (1 ≦ i ≦ N) には、
# (i 回目のじゃんけんにおいてアリスさんが出した手)、
# (i 回目のじゃんけんにおいてボブさんが出した手) を表す文字列 A_i, B_i がこの順で半角スペース区切りで与えられます。
# ・入力は合計で N + 1 行となり、末尾に改行が 1 つ入ります。
# ・じゃんけんの手は「グー」、「チョキ」、「パー」の 3 種類のみであり、
# それぞれ順番に 'G', 'C', 'P' というアルファベット 1 文字によって表現されます。


# 入力例1
# 6
# G C
# C G
# P G
# G C
# P P
# P C
# 出力例1
# 3

#me
N = gets.to_i

count = 0

N.times do
    A, B = gets.split(' ')
    if A == "G"  && B == "C"
        count += 1
    elsif A == "C"  && B == "P"
        count += 1
    elsif A == "P"  && B == "G"
        count += 1
    end
end

puts count

#gpt
def winning_hand(hand)
    case hand
    when 'G' then 'C'  # グーの場合はチョキが勝つ
    when 'C' then 'P'  # チョキの場合はパーが勝つ
    when 'P' then 'G'  # パーの場合はグーが勝つ
    end
end

N = gets.to_i
count = 0

N.times do
    A, B = gets.split(' ')
    count += 1 if winning_hand(A) == B
end

puts count

https://paiza.jp/challenges/724/retry_result/f2641731dea4c0e202ebf2b93838f2ad
# あなたは異世界に転生した勇者です。この世界にはレベルという概念があり、戦闘を起こした際、レベルが高い方が勝利となります。勝利した側は相手のレベルの半分 (小数点以下切り捨て) だけレベルが上昇し、敗北した側はレベルが半分 (小数点以下切り捨て) になります。
# またレベルが同じ場合戦闘は引き分けとなり、レベルの変動は起きません。

# 例えばあなたのレベルが 20 で、戦闘相手のレベルが 11 のとき、あなたの勝利となります。
# 戦闘後、あなたのレベルは 5 上昇し 25 に、相手のレベルは 5 になります。

# あなたはこの世界でのレベルの変化をシミュレーションしようと考えています。
# 戦闘を始める前のあなたのレベルと、N 回の戦闘で戦う相手のレベルが順に与えられるので、N 回の戦闘後にあなたのレベルがいくつになったかを出力してください。

# 入力例 1 では以下の表のようにレベルが遷移します。

# 初めのあなたのレベルは 10 で、5 人と戦闘します。
# 1 人目と 2 人目、それぞれとの戦闘はあなたの勝利で、それぞれの戦闘でレベルが 2, 5 上昇します。
# 3 人目との戦闘時点でのあなたのレベルは 17 なので、レベル が 20 である相手に敗北してレベルが 8 に変化します。
# 4 人目との戦闘は引き分けでレベルの変化は生じません。
# 最後に 5 人目との戦闘に勝利し、レベルが 3 上昇してレベル 11 となります。

# 入力される値
# 入力は以下のフォーマットで与えられます。

# N L
# x_1
# x_2
# ...
# x_N
# ・1 行目に戦闘回数の N と、最初のあなたのレベル L が与えられます。
# ・続く N 行の各行には i 番目 (1 ≦ i ≦ N) の戦闘相手のレベルが x_i であるという情報が与えられます。
# ・入力は合計で N+1 行からなり、入力値最終行の末尾に改行が 1 つ入ります。


# me
N, L = gets.split(' ').map(&:to_i)

level = L

N.times do
    x = gets.to_i
    if level == x
    elsif level > x
        ep = x / 2
        level += ep
    elsif level < x
        level = level / 2
    end
end

puts level

#gpt

N, L = gets.split(' ').map(&:to_i)

level = L

N.times do
    x = gets.to_i
    win = level > x
    draw = level == x
    level = win ? level + x / 2 : (draw ? level : level / 2)
end

puts level


思ったことが条件分岐が長くならない。
後置if文や三項演算子を使用している。
また、関数も使用している。
比較演算子を変数に入れる発想がなかったので面白かった。

積極的に三項演算子を使用して行って自分の中に刷り込むしかないと思った。

https://paiza.jp/works/challenges/403/retry
S = gets.chomp
output =  "+#{S}+"
border = "+" * output.length

puts border
puts output
puts border

+++++++
+Paiza+
+++++++

変数 = 文字列 * 数値
文字列を数値分、増やすことができる。
これ便利。

https://paiza.jp/works/challenges/488/page/result
正解！
# あなたは、折り紙がたくさん置かれているのをみつけました。
# それらを連結して 1 枚の大きな紙の垂れ幕を作ることにしました。

# 各折り紙は 1 辺の長さが D cm 、すなわち縦 D cm × 横 D cm の正方形です。
# これらの折り紙を、左右に長く伸びた直線を基準に貼り付けていきます。
# ただし、各折り紙について、いずれか 1 辺がちょうど直線に重なるようにします。
# また、 1 枚目を貼り付けたあと、 2 枚目以降は以下のルールに従って順に貼り付けていきます。

# ・1 つ前に貼り付けた折り紙の右辺からみて、 1 cm 以上 D/2 cm 以下だけ重なるように貼り付ける。(下図に例を示しています。)

# 上記のルールを守って作られたある垂れ幕について、基準の直線を平面座標の x 軸とみなして
# 、2 枚目以降の各折り紙における 1 つ前の折り紙への重なり具合が与えられます。
# 1 枚になった垂れ幕部分の面積を計算してください。
# 例えば、入力例 1 では以下のように計算できます。

# 入力される値
# 入力は以下のフォーマットで与えられます。

# N D
# d_2
# ...
# d_N
# ・1 行目には、折り紙の枚数を表す整数 N および折り紙の 1 辺の長さを表す整数 D が半角スペース区切りで与えられます。
# ・1 + i 行目 (1 ≦ i ≦ N - 1) には整数 d_{i + 1} が与えられます。
# これは、 i + 1 枚目の折り紙が i 枚目の折り紙に d_{i + 1} cm 重なっていることを表します。

# 入力例1
# 3 4
# 2
# 1
# 出力例1
# 36

#me
N, M = gets.split(' ').map(&:to_i)

sum = N * M

N.times do |i|
    d = gets.to_i
    sum -= d
end

result = sum * M
puts result

#gpt
N, D = gets.split.map(&:to_i)

total_overlap = 0

(N - 1).times do
  overlap = gets.to_i
  total_overlap += overlap
end

# すべての折り紙の重なり具合を合計する
# 最初の折り紙は左端から始まるので、その分は重なり具合に含まれない
# 最後の折り紙は右端にくっつくので、その分も重なり具合に含まれない
total_area = D * N * D
total_overlap_area = total_overlap * D

# 全体の面積から重なり具合を引いた値が最終的な垂れ幕部分の面積
final_area = total_area - total_overlap_area

puts final_area




