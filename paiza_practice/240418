今日の積み上げ

再復習　
  joinメソッドは配列の要素を区切り文字で文字列に変換することができる。
  配列⇨文字列型

splitメソッド
  区切り文字を設定して文字列を配列に変換することができる
  数値型は文字列型に変換してから配列に変換できる

mapメソッド
  配列の各要素に対して処理を実行したい時に使うメソッド。
  新たに配列を作成することができる
  文字列に対して使うときはcharsメソッドを使用してから使う。

string.chars
  文字列を配列に変換したい時に使うメソッド
  結構頻繁に使うので覚えておいて損はない,each_charもあるで

each_slice
  配列や範囲に使用可能。
  配列や範囲を3つずつのスライスに分割し、それぞれのスライスに対してブロックを実行することができる。

配列に代入する方法
  2次元配列に要素を代入したいとき
    空の配列を作成⇨代入したい要素を文字列に変換して連結させる⇨chars.each_with_indexで空の配列に代入⇨配列からeachでputs 要素.join('')

配列から出力する方法
  数字を決まった桁数で分割したいとき
    each_slice(n) { |n| puts n.join('') }

要素数が9つなのでeach_sliceを使うと3つの要素に分解できる。
分解した要素の数だけ{}の処理を繰り返すことができる。



https://paiza.jp/works/mondai/stdout_primer/ruby/stdout_primer__2dim_array_step2/result?token=df43055000ad9b15e3e1314fac788628
# 9 個の数値が半角スペース区切りで入力されます。この数値を 3 行 3 列の形式で出力してください。
# 具体的には、入力された数値を N_1 , N_2 , N_3 , ..., N_9 とするとき、
#  1 行目にはN_1 からN_3 を、
# 2 行目には N_4 から N_6 を、
# 3 行目には N_7 から N_9 を出力してください。
# ただし、数値の間には半角スペースを、各行の末尾には、半角スペースの代わりに改行を入れてください。
# 入力される値
# N_1 N_2 N_3 ... N_9
# 答えの数値を出力してください。
# N_1 N_2 N_3
# N_4 N_5 N_6
# N_7 N_8 N_9

#自分で解いた方法
N = gets.chomp
a = N.split(' ')
a.each_slice(3) { |row| puts row.join(' ') }


# nmuber = [1, 2, 3, 4, 5, 6, 7, 8, 9]

#自分で解いたコード
9.times do |i|
    i += 1
    puts nmuber.map { |n| n * i }.join(' ')
end

#gpt先生
# (1..9).each do |i|
#     puts (1..9).map { |j| i * j }.join(' ')
# end

先にどうのよう出力したいか方針を決める。
配列を作りその中に要素を代入して出力

ある程度パターンがある
自分がどのパターンを使えるか整理して状況にあった選択肢を使うことで勝率はあがりそう。
自分の中で言語化してパターン化できるぐらいまで理解すれば自ずと勝率はあがる。

いままではこの要素を代入したいけどどうやればええねん！で詰まってた。
でも今はある程度の処理は実装できるようになってきた。
でも最適解はたくさんあるし、日々感心することが多い。でも楽しい。
自分の頭で考え、結果通りに出力がされたときの脳汁の出方は半端ない








