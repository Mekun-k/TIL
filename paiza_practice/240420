4月20日(土)の積み上げ


range.to_aで配列が作れる。
例　(1..3).to_a => [1, 2, 3]

受け取る処理自体は合っている。
でも出力の仕方がナンセンス。もっと簡単に実装できるのにtimesやeachを使おうとしていた。

以下のように変換することができる
A = gets.chomp.split.join
[1, 2, 3, 4, 5] => "12345"


hoge = [1, 2, 3]
puts hoge.join
実行結果
123

hoge = [1 2 3]
puts hoge.join
実行結果
Main.rb:39: syntax error, unexpected integer literal, expecting ']'
hoge = [1 2 3]


ファイナル問題がとけない
https://paiza.jp/works/mondai/stdout_primer/ruby/stdout_primer__variable_array_boss/result?token=130fe18827845e0c44d050b9118762f7
N, M = gets.split(' ')
A = gets.split(' ')
B = gets.split(' ').map(&:to_i)

B1 = []
B2 = []
B3 = []
B4 = []


A.each_with_index do |char, index|
    if index < B[0]
        B1 << char
    elsif index < B[0] + B[1]
        B2 << char
    elsif index < B[0] + B[1] + B[2]
        B3 << char
    elsif index < B[0] + B[1] + B[2] + B[3]
        B4 << char
    end
end

puts B1.join(' ')
puts B2.join(' ')
puts B3.join(' ')
puts B4.join(' ')

gptパイセン
N, M = gets.split.map(&:to_i)
A = gets.split.map(&:to_i)
B = gets.split.map(&:to_i)

start_index = 0
M.times do |i|
    b = B[i]
    end_index = start_index + b
    puts A[start_index...end_index].join(' ')
    start_index = end_index
end


.. : 閉区間演算子。指定した範囲の終了値を含みます。
... : 開区間演算子。指定した範囲の終了値を含みません。
たとえば、1..5 は 1 から 5 までの整数の範囲を表し、1...5 は 1 から 4 までの整数の範囲を表します。
開区間演算子を使用すると、指定した値が範囲に含まれないことがわかりやすくなります。

前問と比べてちょっと難しかったかもしれませんが、イメージとしては 数列A を M 個に分割するというものです。
1 行目は数列のここからここまでを出力、2 行目は数列のここからここまでを出力...ということがわかれば前問と同じように解くことができます。
さて、各行で出力する区間なのですが、始点(begin)がわかれば終点(end)は end = begin + B[i] - 1 と、容易に求まります。注意点として、end = begin + B[i] とすると、最後の要素は範囲外なので出力してはいけません(今回は数学の言葉で「閉区間」として考えます。)。
次に始点について考えてみます。最初に出力する数列の始点は 0 です(問題文では 1 - indexed でしたが、解説では 0 -indexed です)。
i番目に出力する数列の始点について考えてみます。これは、(i - 1 番目に出力する数列の終点) + 1 であることがわかります。よって、すべての数列の始点と終点がわかりました。

方針とコードの解き方を理解して自分のものにする

おそらくいままで以下のコードにて出力をしてきた
puts A[start_index...end_index].join(' ')

だから始点と終点を求めるという発想がでてくればよかった。
もう一度、基礎問題から解き直してこう。
大抵、行数の整数を受け取れば、N.timesを使用している。

バカは回数をこなして学習していこう。
自分の頭で発想できないならひたすらインプットして盗んでいけ。
          ^

https://paiza.jp/works/mondai/stdout_primer/stdout_primer__variable_array_step1/edit?language_uid=ruby
結果：ミス
原因：ポカミス、繰り返し処理のところで(1..8)と書いたが正解は、(1..N)。他のテストケースには適応できていなかった。
1問目
# 偶数 N が入力されます。まず、 1 行目には 1 以上 N / 2 以下の数値を半角スペース区切りですべて出力してください。
# 次に、 2 行目には N / 2 + 1 以上 N 以下の数値を半角スペース区切りですべて出力してください。
# 各行の末尾には、半角スペースの代わりに改行を入れてください。

# 入力例1
# 8

# 出力例1
# 1 2 3 4
# 5 6 7 8

N = gets.to_i

first_half = []
second_half = []

(1..8).each do |i|
    if i >= 1 && i <= N / 2
        first_half << i
    else
        second_half << i
    end
end

puts first_half.join(' ')
puts second_half.join(' ')

第一問目について他の解き方がないか調べる。
理解できたら第二問目に移る。
#別の解き方
N = gets.to_i
puts (1..N/2).to_a.join(' ')
puts (N/2+1..N).to_a.join(' ')


第二問目
https://paiza.jp/works/mondai/stdout_primer/ruby/stdout_primer__variable_array_step2/result?token=cb65df0af58cbdc4e04d3eac0994f37b

# 自然数 N, M が与えられます。1 行目には 1 以上 N 以下の数値を半角スペース区切りで出力してください。
# また、2 行目には 1 以上 M 以下の数値を半角スペース区切りで出力してください。
# さらに、各行の末尾には、半角スペースの代わりに改行を入れてください。
# 入力例1
# 3 5

# 出力例1
# 1 2 3
# 1 2 3 4 5

#解き方１
N, M = gets.split(' ').map(&:to_i)

puts (1..N).to_a.join(' ')
puts (1..M).to_a.join(' ')

#解き方2
A = gets.split(' ').map(&:to_i)

first_half = []
second_half = []

A.each do |i|
    if i >= 1 && i <= A[0]
        first_half << (1..i)
    elsif i >= 1 && i <= A[1]
        second_half << (1..i)
    end
end

first_half.each { |first| puts first.to_a.join(' ') }
second_half.each { |second| puts second.to_a.join(' ') }

(1..3)などはto_a.join、もしくは、eachメソッドでputs val.join(' ')で処理する

第3問目

# 自然数 N が与えられます。1 ≦ i ≦ N の各 i について、i 行目には以下の数列を出力してください。
# * 1 以上 i 以下の数値をすべて、半角スペース区切りで出力してください

# 入力される値
# N

# 入力例1
# 4

# 出力例1
# 1
# 1 2
# 1 2 3
# 1 2 3 4

#me
N = gets.to_i

N.times do |i|
    row =  (1..i+1).to_a.join(' ')
    puts row
end

#gpt
N = gets.to_i

(1..N).each do |i|
    nam =  (1..i)
    puts nam.to_a.join(' ')
end

どっちでも結果は同じ。
(1..N).each　の発想がでてこなかったので感心。
結局大事なのは(1..N)というrangeを使っている点に尽きる。
これを覚えるためにこの演習があるはず。
数字を連番させる処理を実装する際にはrangeを使うことを意識しよう。

第4問目
# 自然数 N と N 個の要素の数列 M が与えられます。
# 1 ≦ i ≦ N の各 i について、i 行目には以下の数列を出力してください。
# * 1 以上 M_i 以下のすべての自然数を昇順、半角スペース区切りで出力してください。

# N
# M_1 M_2 M_3 ... M_N

# 入力例1
# 4
# 2 4 3 1

# 出力例1
# 1 2
# 1 2 3 4
# 1 2 3
# 1

#me
N = gets.to_i
M = gets.split(' ').map(&:to_i)

M.each do |i|
    puts (1..i).to_a.join(' ')
end

#me
N = gets.to_i
M = gets.split(' ').map(&:to_i)

(1..N).each do |i|
    i = i - 1
    nam = M[i].to_i
    puts (1..nam).to_a.join(' ')
end

本当はputsの行でM[i]を使いたかった。
でもrangeでは配列を使用することはできないみたい。←まちがい
Mが1だった場合
M = [1]
M[1]となると要素が一つしかないのにインデックス番号が2つ目の要素を呼び出しているのでnilになる。
なのでこの場合は、timesメソッドを使用するのが正しい。

整数に変換してnam変数に代入した。そのnam変数を(1..nam)とすることで解決。
でももっと綺麗なコードになるはず。

#gpt
N = gets.to_i
M = gets.split.map(&:to_i)

N.times do |i|
  nums = (1..M[i]).to_a
  puts nums.join(' ')
end

めちゃくちゃ綺麗やん。
入力値の受け取り方がちがうな。

M = gets.split.map(&:to_i)
p M
p M.class
[2, 4, 3, 1]
Array


Array
[2, 4, 3, 1]

次はファイナル問題を解いてみる。



