https://paiza.jp/works/mondai/stdin_primer/stdin_primer__matrix_data_step1/edit?language_uid=ruby&t=7c7ac18014d3c609ea31b986209544f9

# 3 行 3 列の行列が与えられます。上から i 番目、左から j 番目の整数は a_{i,j} です。
# 3 行 3 列の行列をそのまま出力してください。
# 3 行 3 列の行列が以下の形式で標準入力によって与えられます。

# a_{1,1} a_{1,2} a_{1,3}
# a_{2,1} a_{2,2} a_{2,3}
# a_{3,1} a_{3,2} a_{3,3}

# 3 行 3 列の行列をそのまま出力してください。
# また、末尾に改行を入れ、余計な文字、空行を含んではいけません。

方針
・3 行 3 列の行列を二次元配列と二重ループを用いて受け取る
・二次元配列と二重ループを用いて 3 行 3 列の形で出力


a = Array.new(3).map { Array.new(3) }

# ↑出力結果[[nil, nil, nil], [nil, nil, nil], [nil, nil, nil]]
# a = Array.new(3).map { Array.new(2) }
# p a
# ↑出力結果　[[nil, nil], [nil, nil], [nil, nil]]

3.times do |i|
  row = gets.split(' ').map(&:to_i)
  3.times { |j| a[i][j] = row[j] }
end

a.each { |row| puts row.join(' ') }

大体のパターンは同じ、
1、配列をつくる、
2、配列に入力値を代入する
3、配列を用いて出力

今回は、2次元配列を作成した。mapを使うことで2次元配列を作れるので覚えておく。
timesの中にtimesを使えることに驚いた。
何のために使うのか不明だったが、2次元配列の要素に入力値を代入するために必要みたい。
インデックス番号を使うのかな？と思ったが予想は外れた。

最後の出力には配列にeachメソッドで要素一つ一つにjoinメソッドを使うことでつながった一つの単語として出力できる。


問題を解いていて思ったことが、似たような問題を繰り返し解いているので解けているが、
時間が経ったときにそのやり方を覚えているのか気になる。

特に今回みたいな2次元配列を作ったり、配列のインデックス番号を用いて入力値を配列に代入するなど、
問題の解き方自体について覚えておく必要がありそう。
このケースの問題には、2次元配列が必要みたいな感じ。
配列のインデックス番号もしかり。





