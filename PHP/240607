2024/06/07の積み上げ
`usort` 関数を使って配列をソートする処理について詳しく説明します。

### `usort` 関数
`usort` は、ユーザー定義の比較関数を使用して配列をソートするPHPの標準関数です。配列自体が変更され、ソートされた状態になります。

### ソート処理のコード
```php
usort($array_data, function($a, $b) {
    return $b[1] - $a[1];
});
```

#### 1. `usort` 関数の基本
`usort` の第一引数はソート対象の配列、第二引数は比較関数です。比較関数は配列の2つの要素を引数として受け取り、それらを比較してソートの順序を決定します。

#### 2. 無名関数（匿名関数）
```php
function($a, $b) {
    return $b[1] - $a[1];
}
```
ここでは、無名関数が使われています。この無名関数は、配列の2つの要素 `$a` と `$b` を引数として受け取ります。この場合、`$a` と `$b` はそれぞれ ["名前", 数値] という形式の要素です。

#### 3. 比較処理
```php
return $b[1] - $a[1];
```
この行は、ソートの基準となる数値部分を比較しています。

- `$a[1]` は `$a` の2番目の要素（数値部分）です。
- `$b[1]` は `$b` の2番目の要素（数値部分）です。

この比較処理では次のように動作します：
- `return $b[1] - $a[1];` は、`$b` の数値が `$a` の数値よりも大きい場合に正の値を返します。つまり、`$b` を `$a` の前に置く（降順）。
- `return $a[1] - $b[1];` ならば、昇順になります。

#### 4. ソートの結果
この比較関数を `usort` に渡すことで、`$array_data` は数値部分に基づいて降順にソートされます。`usort` は、この比較関数を使って配列の要素を比較し、ソートします。

### 具体例
元の配列が以下のようになっているとします：
```php
$array_data = [
    ["らんてくん", 98],
    ["ロボらんてくん", 23],
    ["ひさじゅ", 100]
];
```

`usort` の比較関数が以下の順序で呼び出されます：
1. ["ロボらんてくん", 23] と ["らんてくん", 98] を比較：
   - `$b[1]` (98) - `$a[1]` (23) = 75 (正の値なので、98 が 23 より前)
2. ["ひさじゅ", 100] と ["ロボらんてくん", 23] を比較：
   - `$b[1]` (100) - `$a[1]` (23) = 77 (正の値なので、100 が 23 より前)
3. ["ひさじゅ", 100] と ["らんてくん", 98] を比較：
   - `$b[1]` (100) - `$a[1]` (98) = 2 (正の値なので、100 が 98 より前)

ソート後の配列は：
```php
[
    ["ひさじゅ", 100],
    ["らんてくん", 98],
    ["ロボらんてくん", 23]
]
```

これにより、得点が高い順（降順）に並び替えられたことが確認できます。
