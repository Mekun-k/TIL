2024/07/13の積み上げ

非同期通信を実装する際には、JSON形式でのやりとりが推奨されているので、リクエストとレスポンスをJSONに指定する必要がある。

そのため、axiosを使う時には、それぞれ指定する必要がある

`.then()` メソッドは、主に非同期処理（例えば、サーバーからのデータ取得やファイル読み込みなど）が成功した後に実行するコードを定義するために使用されます。具体的には以下の役割を担っています：

- **`html`**: データの形式を示す。例えば、JSON形式のデータや、サーバーから返されたHTMLコンテンツを指定する際に使われる。
- **`innerHTML`**: DOM要素のプロパティであり、その要素の内部のHTMLコンテンツを設定または取得するために使われる。

つまり、`html` はデータの形式を指定するのに対して、`innerHTML` はDOM要素の内部のHTMLコンテンツを操作するために使われます。

この場合、`.then()` と `.catch()` メソッドは、JavaScriptのPromiseを扱う際に使われる構文です。先頭に`.`がついているのは、これらのメソッドが直前のPromiseオブジェクトに対してチェーンされることを示しています。

```php
      .then(response => {
        bookmarkForm.innerHTML = response.data.html;
      })
      
      このコードは、非同期通信でサーバーからデータを取得した後、そのデータを使って特定の処理を行うための仕組みです。

.then() メソッド: then() メソッドは、非同期操作が成功した場合に実行されるコールバック関数を設定します。つまり、サーバーからのレスポンスが正常に受け取られた後に、その後の処理を記述します。

response パラメータ: コールバック関数の引数として response を受け取ります。これは、サーバーから返されたレスポンスを含むオブジェクトです。

response.data.html: response オブジェクトの中で、data プロパティにはサーバーからのデータが格納されています。ここで、.html はサーバーからのレスポンスの一部として、HTML形式のデータが含まれていることを示します。

bookmarkForm.innerHTML = response.data.html;: bookmarkForm という特定の要素（おそらくHTMLフォーム）の内部HTMLを、サーバーから受け取った response.data.html の内容に置き換えます。これにより、サーバーからの動的なデータを使って、ページの特定の部分を更新することができます。
```

なぜか更新は正常に作動するのに、削除だけ機能していない
